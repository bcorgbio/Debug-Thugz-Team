ggplot(titanicData, aes(x=age)) + geom_histogram()
library(ggplot2)
install.packages("ggplot2")
install.packages("dplyr")
library(ggplot2)
titanicData <- read.csv("DataForLabs/titanic.csv", stringsAsFactors = TRUE)
2+2
(2^4)+1
sqrt(4)
log(1.4)
x=6
x
X
git config pull.rebase false  # merge (the default strategy)
library(ggplot2)
library(tidyverse)
setwd("~/Desktop/Exp Methods/Files")
dat <- read.csv("scales.csv")
dim(dat)
sapply(dat,class)
dat$species <- as.factor(dat$species)
species <- levels(dat$species)
species
species.n<- dat %>%
group_by(species) %>%
summarise(n = n())
species.n
dat %>%
count(species,specimen) %>%
print() %>%
count(species,name = "n.specimens")
for(i in 1:10) print(i)
for(i in species){
p <- dat %>%
filter(species==i)%>%
ggplot()+geom_boxplot(aes(x=quadrant,y=N))+ggtitle(i)
print(p)
}
pdf("species.quadrant.pdf")
for(i in species){
p <- dat %>%
filter(species==i)%>%
ggplot()+geom_boxplot(aes(x=quadrant,y=N))+ggtitle(i)
print(p)
}
dev.off()
list.files(pattern=".pdf")
setwd("~/Desktop/Exp Methods")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(readr)
pseed_fin_amps <- read_csv("pseed.fin.amps.csv")
View(pseed_fin_amps)
pseed <- read_csv("pseed.fin.amps.csv")
library(readr)
pseed_lengths <- read_csv("pseed.lengths.csv")
View(pseed_lengths)
library(readr)
pseed_calibration <- read_csv("pseed.calibration.csv")
View(pseed_calibration)
pseed.bl <- read_csv("pseed.lengths.csv")
pseed2 <- pseed%>%
pseed2 <- pseed%>%
pseed2 <- pseed%>%
left_join(speeds,by=c("speed"="vol"))%>%
print()
install.packages("dplyr")
library(dplyr)
pseed2 <- pseed%>%
left_join(speeds,by=c("speed"="vol"))%>%
print()
pseed <- read_csv("pseed.fin.amps.csv")
pseed.bl <- read_csv("pseed.lengths.csv")
speeds <- read_csv("pseed.calibration.csv")
pseed2 <- pseed%>%
left_join(speeds,by=c("speed"="vol"))%>%
print()
pseed.bl%>%
print()
pseed2%>%
select(fish)%>%
unique()
pseed2 <- pseed2%>%
left_join(pseed.bl,by="fish")%>%
print()
pseed2 <- pseed2%>%
mutate(bl.s=cm.s/bl)%>%
print()
pseed2%>%
ggplot(aes(x=bl.s,y=amp.bl))+geom_point()
pseed2%>%
ggplot(aes(x=bl.s,y=amp.bl))+geom_point(alpha=0.01)
pseed2%>%
filter(date=="2019-06-17-151149", fin=="L")%>%
ggplot(aes(x=frame,y=amp.bl))+geom_point()
library(features)
install.packages("features")
library(features)
exp1 <- pseed2%>%
filter(date=="2019-06-17-151149", fin=="L")
exp1 <- pseed2%>%
filter(date=="2019-06-17-151149", fin=="L")
f1 <-  features(x = exp1$frame,y=exp1$amp.bl)->f1
#made an exp1 data frame
#pass "frame" column to x parameter
#pass "amp.bl" column to y parameter
#to extract important stuff from features() fucntion
fget(f1)
pseed2%>%
filter(date=="2019-06-17-151149", fin=="L")%>%
ggplot(aes(x=frame,y=amp.bl))+geom_point()+geom_vline(xintercept = fget(f1)$crit.pts)
f2 <-  features(x = exp1$frame,y=exp1$amp.bl*100)
fget(f2)
f.tib <- fget(f2)[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))%>%
print()
pseed2%>%
filter(date=="2019-06-17-151149", fin=="L")%>%
mutate(peak=frame %in% f.tib$peaks)%>%
ggplot(aes(x=frame,y=amp.bl,col=peak))+geom_point()
pseed2%>%
summarize(n=length(unique(date)))
find.peaks <- function(x,y,mult=100){ #define the functions parameter/inputs:x,y, and how much to multiple y by (remember the rounding issue)
f <- fget(features(x = x,y=y*mult))[2:3]%>% #store results in `f` and compute the features for the x-y relationship, use fget() to retrieve important features, subset results to take the 2nd and 3rd and items, the critical points and curvature
as_tibble()%>% #pass to a tibble
filter(curvature<0)%>% #pass in through filter that returns curvatures <0
mutate(peaks=round(crit.pts,0)) #add a column that rounds the critical point to an integer that represents the frame
return(f$peaks) # return the peaks from tibble
find.peaks <- function(x,y,mult=100){ #define the functions parameter/inputs:x,y, and how much to multiple y by (remember the rounding issue)
f <- fget(features(x = x,y=y*mult))[2:3]%>% #store results in `f` and compute the features for the x-y relationship, use fget() to retrieve important features, subset results to take the 2nd and 3rd and items, the critical points and curvature
as_tibble()%>% #pass to a tibble
filter(curvature<0)%>% #pass in through filter that returns curvatures <0
mutate(peaks=round(crit.pts,0)) #add a column that rounds the critical point to an integer that represents the frame
return(f$peaks) # return the peaks from tibble
find.peaks <- function(x,y,mult=100){ #define the functions parameter/inputs:x,y, and how much to multiple y by (remember the rounding issue)
f <- fget(features(x = x,y=y*mult))[2:3]%>% #store results in `f` and compute the features for the x-y relationship, use fget() to retrieve important features, subset results to take the 2nd and 3rd and items, the critical points and curvature
as_tibble()%>% #pass to a tibble
filter(curvature<0)%>% #pass in through filter that returns curvatures <0
mutate(peaks=round(crit.pts,0)) #add a column that rounds the critical point to an integer that represents the frame
return(f$peaks) # return the peaks from tibble
}
find.peaks <- function(x,y,mult=100){
f <- fget(features(x = x,y=y*mult))[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))
return(f$peaks)
}
pseed2%>%
filter(date%in%unique(date)[1:3])%>%
group_by(date,fin)%>%
mutate(peak=frame %in% find.peaks(frame,amp.bl))%>%
ggplot(aes(x=frame,y=amp.bl,alpha=peak,col=peak))+geom_point()+facet_grid(date~fin)
find.peaks <- function(x,y,mult=100){
f <- fget(features(x = x,y=y*mult))[2:3]%>%
as_tibble()%>%
filter(curvature<0)%>%
mutate(peaks=round(crit.pts,0))
return(f$peaks)
}
pseed2%>%
filter(date%in%unique(date)[1:3])%>%
group_by(date,fin)%>%
mutate(peak=frame %in% find.peaks(frame,amp.bl))%>%
ggplot(aes(x=frame,y=amp.bl,alpha=peak,col=peak))+geom_point()+facet_grid(date~fin)
find.peaks <- function(x,y,mult=100){ #define the functions parameter/inputs:x,y, and how much to multiple y by (remember the rounding issue)
f <- fget(features(x = x,y=y*mult))[2:3]%>% #store results in `f` and compute the features for the x-y relationship, use fget() to retrieve important features, subset results to take the 2nd and 3rd and items, the critical points and curvature
as_tibble()%>% #pass to a tibble
filter(curvature<0)%>% #pass in through filter that returns curvatures <0
mutate(peaks=round(crit.pts,0)) #add a column that rounds the critical point to an integer that represents the frame
return(f$peaks) # return the peaks from tibble
}
pseed2%>%
filter(date%in%unique(date)[1:3])%>%
group_by(date,fin)%>%
mutate(peak=frame %in% find.peaks(frame,amp.bl))%>%
ggplot(aes(x=frame,y=amp.bl,alpha=peak,col=peak))+geom_point()+facet_grid(date~fin)
pseed.max <- pseed2%>%
group_by(date,fin)%>%
mutate(peak=frame %in% find.peaks(frame,amp.bl))%>%
filter(peak==T) #new filter
pseed.max%>%
ggplot(aes(x=bl.s,y=amp.bl))+geom_point()+geom_smooth(method="lm")
amp.aov <-  aov(amp.bl~bl.s,pseed.max)
summary(amp.aov)
pseed2 <- pseed2 %>%
group_by(date,frame) %>%
mutate(amp.sum=sum(amp.bl))
setwd("~/Desktop/Exp Methods/Debug-Thugz-Team/Debug-Thugz-Team")
setwd("~/Desktop/Exp Methods/Debug-Thugz-Team/Debug-Thugz-Team")
