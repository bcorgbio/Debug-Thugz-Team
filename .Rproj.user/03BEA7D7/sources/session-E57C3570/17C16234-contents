#to load library 
library(tidyverse)
library(dplyr)
#to set working directory 
View(pseed_fin_amps)
#to load data
pseed <- read_csv("pseed.fin.amps.csv")

pseed.bl <- read_csv("pseed.lengths.csv")

speeds <- read_csv("pseed.calibration.csv")

#JOINING RELATIONAL DATA
  #need amplitude and swim/water speed in the same table
  #need to perform an OUTER JOIN
  #BY adding observations that appear in at least one of the tables
  #need to find common attribute of both tables whose values will be added to the new data to the table
  #voltage is represented as "speed" in pseed table 
  #voltage is represented as "vol" in speeds table
  #want to add smaller table to larger
  #so will be adding speeds table to pseed table (from right to left)
#to join new data to left data
pseed2 <- pseed%>%
  left_join(speeds,by=c("speed"="vol"))%>%
  print()
  
#ADDING DATA TO DATA FROM ITS OWN DATA
  #need to get body lengths per sec so BL/s
  #can divide BL by cm/s
pseed.bl%>%
  print()
#to find what 2 fish are new or "unique" in the results table 
pseed2%>%
  select(fish)%>%
  unique()
#can see that "Pseed5" and "Pseed6" are new
#the column "fish" is common to both tables pseed.bl and pseed2
#to join the body length table pseed.bl with the results tibble pseed2
pseed2 <- pseed2%>%
  left_join(pseed.bl,by="fish")%>%
  print()
#pseed2 is the new merged table
#to add a new bl.s column, must mutate and divide cm.s by bl.s
pseed2 <- pseed2%>%
  mutate(bl.s=cm.s/bl)%>%
  print()

#to make gg plot
pseed2%>%
  ggplot(aes(x=bl.s,y=amp.bl))+geom_point()
#plot is fin amplitude (amp.bl) (y-axis) against specific swimming speed (bl.s) (x-axis)
  #amp.bl vs. bl.s
#use the alpha parameter to prevent overlapping points 
  #the lower the value for alpha (from 0-1), the more transparent the geometry being plotted 
pseed2%>%
  ggplot(aes(x=bl.s,y=amp.bl))+geom_point(alpha=0.01)
#to look at the amplitude over each frame by plotting these values (on left) use filter()
pseed2%>%
  filter(date=="2019-06-17-151149", fin=="L")%>%
  ggplot(aes(x=frame,y=amp.bl))+geom_point()
  
#USING CUSTOMIZED FUNCTION 
  #install features package 
library(features)

#to use features() function 
  #need to make a curvy relationship and vectors for x and y data
  exp1 <- pseed2%>%
    filter(date=="2019-06-17-151149", fin=="L")
  
  f1 <-  features(x = exp1$frame,y=exp1$amp.bl)->f1
  #made an exp1 data frame
  #pass "frame" column to x parameter
  #pass "amp.bl" column to y parameter
#to extract important stuff from features() function
  fget(f1)
  #there are 24 critical points 
  
  pseed2%>%
    filter(date=="2019-06-17-151149", fin=="L")%>%
    ggplot(aes(x=frame,y=amp.bl))+geom_point()+geom_vline(xintercept = fget(f1)$crit.pts)
  #plot is amp.bl vs.frame 
  
#to get positive and negative curvatures for the critical points 
  #multiply amplitude values by 100 and see results
  f2 <-  features(x = exp1$frame,y=exp1$amp.bl*100)
  fget(f2)
  
#to make a tibble using tidyverse
  #to pull out peaks column (where critical points are negative) use filter ()
  f.tib <- fget(f2)[2:3]%>%
    as_tibble()%>%
    filter(curvature<0)%>%
    mutate(peaks=round(crit.pts,0))%>%
    print()
  
  pseed2%>%
    filter(date=="2019-06-17-151149", fin=="L")%>%
    mutate(peak=frame %in% f.tib$peaks)%>%
    ggplot(aes(x=frame,y=amp.bl,col=peak))+geom_point()
  
  pseed2%>%
    summarize(n=length(unique(date)))

#to find max amplitude for each fin during each oscillation use for loop function
  
find.peaks <- function(x,y,mult=100){ #define the functions parameter/inputs:x,y, and how much to multiple y by (remember the rounding issue)
f <- fget(features(x = x,y=y*mult))[2:3]%>% #store results in `f` and compute the features for the x-y relationship, use fget() to retrieve important features, subset results to take the 2nd and 3rd and items, the critical points and curvature
      as_tibble()%>% #pass to a tibble
      filter(curvature<0)%>% #pass in through filter that returns curvatures <0
      mutate(peaks=round(crit.pts,0)) #add a column that rounds the critical point to an integer that represents the frame
    return(f$peaks) # return the peaks from tibble
}  

pseed2%>%
  filter(date%in%unique(date)[1:3])%>% #grouped data by date (experiment) and fin
  group_by(date,fin)%>% #added a column peak to data set
  mutate(peak=frame %in% find.peaks(frame,amp.bl))%>%
  ggplot(aes(x=frame,y=amp.bl,alpha=peak,col=peak))+geom_point()+facet_grid(date~fin) #plot amplitude over frame
  #to break the plot up into a grid according values in the data use facet_grid(row facets~column facets)
    
    pseed.max <- pseed2%>%
      group_by(date,fin)%>%
      mutate(peak=frame %in% find.peaks(frame,amp.bl))%>%
      filter(peak==T) #new filter
    
#to add a smooth line that represents a linear regression model (method="lm")  
    pseed.max%>%
      ggplot(aes(x=bl.s,y=amp.bl))+geom_point()+geom_smooth(method="lm")

#to find statistical signifcance, run a simple statistical test on this model, an ANOVA    
    amp.aov <-  aov(amp.bl~bl.s,pseed.max)
    summary(amp.aov)
    
    #Pr(>F) so p value is lower than 0.05, indicating a significant relationship
#NEXT STEPS
    #to plot means vs. speed and a linear regression line for each fish
    pseed.max %>%
      group_by(fish, bl.s) %>%
      summarize(mean.max=mean(amp.bl)) %>%
      ggplot(aes(x=bl.s,y=mean.max,col=fish))+geom_point()+geom_smooth(method="lm")
    
#PIVOTING TO DIFFERENT QUESTIONS 
    pseed2
 #to add column (say amp.sum) to the tibble that represents the sum of the amplitudes   
    pseed2 <- pseed2 %>%
      group_by(date,frame) %>%
      mutate(amp.sum=sum(amp.bl))
  #to delete one of the rows for each frame in each experiment  
    #each data value must have itâ€™s own cell
    pseed2 %>%
      filter(fin=="R")
 #to give left and right fins their own amplitude column and sum the values of these to get sum of amplitude   
    pseed.wide <- pseed2 %>% 
      select(-amp)%>% #pass pseed2 through select() to remove unneeded amp column 
      pivot_wider(names_from = fin,values_from = amp.bl) %>% #pulls names from "fin" column and data from "amp.bl" column
      mutate(amp.sum=L+R)%>% #new column named "amp.sum" with amplitude data from L and R
      print() 